{"version":3,"file":"static/webpack/static/development/pages/RequestsInstitution.js.a3f1cd6406664dee4e33.hot-update.js","sources":["webpack:///./pages/RequestsInstitution.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Head from \"next/head\";\nimport {Button, Card, Icon, Segment, Table} from \"semantic-ui-react\";\nimport FixedMenuLayout from \"../components/footer\";\nimport instance from \"../components/verifier.js\";\nimport web3 from '../components/web3.js';\nimport SimpleSnackbar from '../components/snackbar.js'\n\nclass RequestsInstitution extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            institutionz: [],\n            accounts: [],\n            loading: false\n        };\n    }\n\n    componentDidMount() {\n        this.loadBlockchainData()\n    }\n\n    //loads the data from the blockchain before the page is fired and executes the following functions from the contract: getJobRequestCount, getJobRequest\n    async loadBlockchainData() {\n        this.setState({accounts: await web3.eth.getAccounts()});\n        this.setState({accounts: await web3.eth.getAccounts()});\n        const x = await instance.methods.getCertRequestCount().call();\n        try {\n            for (let i = 0; i < x; i++) {\n                let z = await instance.methods.getCertRequest(i).call();\n\n                    this.setState({institutionz: [...this.state.institutionz, z]});\n\n            }\n        } catch (err) {\n            this.setState({errorMessage: err.message});\n        }\n    }\n\n    //renders the certificates requests of an institution in table rows\n    renderCertRequests() {\n        const x = this.state.accounts[0];\n        let r = this.state.institutionz.map(function (cert, index) {\n            return [<Table.Row>\n                <Table.Cell key={x}>{cert[2].toString()}</Table.Cell>\n                <Table.Cell key={x}>{cert[0].toString()}</Table.Cell>\n                <Table.Cell key={x}>{cert[1].toString()}</Table.Cell>\n                <Table.Cell key={x}>{cert[3].toString()}</Table.Cell>\n                <Button  onClick={(e) => {\n                    //calls the approveRequestCertificate function of the contract\n                    e.preventDefault();\n                    instance.methods.approveRequestCertificate(index).send({from: x});\n                    this.setState({loading: true});\n                }}><Icon color='black' name='check'/></Button>\n                < Button  onClick={(e) => {\n                    //calls the denyRequestCertificate function of the contract\n                    e.preventDefault();\n                    instance.methods.denyRequestCertificate(index).send({from: x});\n                    this.setState({loading: true});\n                }}><Icon color='black' name='close'/></Button>\n\n            </Table.Row>];\n        });\n\n        return r;\n    }\n\n    //renders the certificates requests in a table\n    renderCertRequestsTables() {\n        let tableStyle = {\n            width: '45%',\n            margin: '30px auto'\n        };\n\n        let cardStyle = {\n            width: '35%',\n            margin: '100px auto',\n        };\n\n        if (this.state.institutionz && this.state.institutionz.length) {\n            return (<Table celled style={tableStyle} color={'blue'} key={'blue'} inverted>\n                    <Table.Header>\n                        <Segment inverted color=\"blue\" style={{textalign: 'center'}}><h2>Requests</h2></Segment>\n                        <Table.Row>\n                            <Table.HeaderCell> ID</Table.HeaderCell>\n                            <Table.HeaderCell>Graduation Year</Table.HeaderCell>\n                            <Table.HeaderCell>Requester</Table.HeaderCell>\n                            <Table.HeaderCell>Degree</Table.HeaderCell>\n                            <Table.HeaderCell>Validate</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {this.renderCertRequests()}\n                    </Table.Body>\n                </Table>\n            );\n        } else return <div style={{margin: '10%'}}><Card style={cardStyle}><h2 style={{margin: '4%'}}>No Requests\n            registered at the moment.</h2></Card></div>;\n    }\n\n    render() {\n        console.log('address:', this.state.accounts[0]);\n        console.log('company:', this.state.loading);\n        return (\n            <div>\n                <div></div>\n                <Head>\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.11/semantic.min.css\"\n                    />\n                    <style>{`\n        body {\n         background: url(\"https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2089&q=80\");\n         background-repeat: no-repeat;\n         background-position: center; \n         background-attachment: fixed;\n        }\n        Card {\n           box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\n     \n           }\n          `}</style>\n                </Head>\n                <div style={{margin: '150px auto'}}>{this.renderCertRequestsTables()}</div>\n                {/*if an operation started the state will change to true and the snackbar will appear */}\n                <div>{this.state.loading === true ? <SimpleSnackbar/> : null}</div>\n                <FixedMenuLayout/>\n            </div>\n        );\n    }\n}\n\nexport default RequestsInstitution;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAGA;;AAAA;AACA;;;;AADA;;;AAAA;AACA;AAAA;;AAAA;AACA;;;;AADA;;;AAAA;AACA;;AAAA;AACA;;AADA;;AAEA;AACA;;AADA;;;;;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;AAJA;;;;;;;;;;;AAOA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAGA;AACA;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA3HA;AACA;AA6HA;;;;A","sourceRoot":""}