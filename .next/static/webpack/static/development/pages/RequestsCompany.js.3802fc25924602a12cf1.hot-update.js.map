{"version":3,"file":"static/webpack/static/development/pages/RequestsCompany.js.3802fc25924602a12cf1.hot-update.js","sources":["webpack:///./pages/RequestsCompany.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Head from \"next/head\";\nimport {Button, Card, Icon, Segment, Table} from \"semantic-ui-react\";\nimport FixedMenuLayout from \"../components/footer\";\nimport instance from \"../components/verifier.js\";\nimport web3 from '../components/web3.js';\nimport SimpleSnackbar from '../components/snackbar.js';\n\nclass RequestsCompany extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobz: [],\n            isCompany: false,\n            isInstitution: false,\n            accounts: [],\n            loading: false\n        };\n    }\n\n    componentDidMount() {\n        this.loadBlockchainData()\n    }\n\n    //loads the data from the blockchain before the page is fired and executes the following functions from the contract: getJobRequestCount, getJobRequest\n    async loadBlockchainData() {\n        this.setState({accounts: await web3.eth.getAccounts()});\n        const x = await instance.methods.getJobRequestCount(this.state.accounts[0]).call();\n        try {\n            for (let i = 0; i < x; i++) {\n                let z = await instance.methods.getJobRequest(this.state.accounts[0], i).call();\n                if (z[5] === false) {\n                    this.setState({jobz: [...this.state.jobz, z]});\n                }\n            }\n        } catch (err) {\n            this.setState({errorMessage: err.message});\n        }\n    }\n\n//renders the jobs requests of a company in table rows\n    renderJobRequests() {\n        const x = this.state.accounts[0];\n        let r = this.state.jobz.map(function (job, index) {\n            return [<Table.Row>\n                <Table.Cell key={x}>{job[2].toString()}</Table.Cell>\n                <Table.Cell key={x}>{job[0].toString()}</Table.Cell>\n                <Table.Cell key={x}>{job[1].toString()}</Table.Cell>\n                <Table.Cell key={x}>{job[3].toString()}</Table.Cell>\n                <Button onClick={(e) => {\n                    e.preventDefault();\n                    //calls the approveRequestJob function of the contract\n                    instance.methods.approveRequestJob(index).send({from: x}).once('receipt', (receipt) => {\n                    });\n                }}><Icon color='black' name='check'/></Button>\n                < Button onClick={(e) => {\n                    e.preventDefault();\n                    //calls the denyRequestJob function of the contract\n                    instance.methods.denyRequestJob(index).send({from: x}).once('receipt', (receipt) => {\n\n                    });\n                }}><Icon color='black' name='close'/></Button>\n            </Table.Row>];\n        });\n        return r;\n    }\n\n    //renders the jobs requests in a table\n    renderJobRequestsTables() {\n        let tableStyle = {\n            width: '45%',\n            margin: '30px auto'\n        };\n\n        let cardStyle = {\n            width: '35%',\n            margin: '100px auto',\n        };\n\n        if (this.state.jobz && this.state.jobz.length) {\n            return (<Table celled style={tableStyle} color={'blue'} key={'blue'} inverted>\n                    <Table.Header>\n                        <Segment inverted color=\"blue\" style={{textalign: 'center'}}><h2>Requests</h2></Segment>\n                        <Table.Row>\n                            <Table.HeaderCell> SSN</Table.HeaderCell>\n                            <Table.HeaderCell>Period Worked</Table.HeaderCell>\n                            <Table.HeaderCell>Position</Table.HeaderCell>\n                            <Table.HeaderCell>Requester</Table.HeaderCell>\n                            <Table.HeaderCell>Validate</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {this.renderJobRequests()}\n                    </Table.Body>\n                </Table>\n            );\n        } else return <div style={{margin: '10%'}}><Card style={cardStyle}><h2 style={{margin: '4%'}}>No Requests\n            registered at the moment.</h2></Card></div>\n    }\n\n    render() {\n        return (\n            <div>\n                <div></div>\n                <Head>\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.11/semantic.min.css\"\n                    />\n                    <style>{`\n        body {\n         background: url(\"https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2089&q=80\");\n         background-repeat: no-repeat;\n         background-position: center; \n         background-attachment: fixed;\n        }\n      `}</style>\n                </Head>\n                <div style={{margin: '150px auto'}}>{this.renderJobRequestsTables()}</div>\n                {/*if an operation started the state will change to true and the snackbar will appear */}\n                <div>{this.state.loading === true ? <SimpleSnackbar/> : null}</div>\n                <FixedMenuLayout/>\n            </div>\n        );\n    }\n}\n\nexport default RequestsCompany;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAGA;;AAAA;AACA;;;;AADA;;;AAAA;AACA;;AAAA;AACA;;AADA;;AAEA;AACA;;AADA;;;;;;AACA;AACA;;AADA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AALA;;;;;;;;;;;AAOA;AAAA;AAAA;AACA;;;;;;;;;;;;;;AAGA;AACA;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AArHA;AACA;AAuHA;;;;A","sourceRoot":""}