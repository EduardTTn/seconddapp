{"version":3,"file":"static/webpack/static/development/pages/index.js.207f1e8e1f19edeb2a08.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, {Component} from 'react';\nimport {Card, Container, Segment, Table, Form, Button, Icon, Message} from 'semantic-ui-react'\nimport Head from \"next/head\";\nimport FixedMenuLayout from \"../components/footer\";\nimport web3 from \"../components/web3\";\nimport instance from \"../components/verifier\";\nimport SimpleSnackbar from '../components/snackbar.js'\n\nclass Index extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            addressform: true,\n            accounts: [],\n            jobs: [],\n            certificates: [],\n            info: '',\n            address: '',\n            email: ''\n\n        };\n    }\n\n    componentWillMount() {\n        this.loadBlockchainData()\n    }\n\n    //loads the accounts present in the metamask\n    async loadBlockchainData() {\n        this.setState({accounts: await web3.eth.getAccounts()});\n    }\n\n    //handle methods are changing the states and prevent the default behaviour\n    handleChange = event => {\n        event.preventDefault();\n        this.setState({\n            info: '',\n            jobs: [],\n            certificates: [],\n            email: '',\n            address: event.target.value,\n            errorMessage: ''\n        });\n\n    };\n\n    handleSecondChange = event => {\n        event.preventDefault();\n        this.setState({\n            info: '',\n            jobs: [],\n            certificates: [],\n            email: event.target.value,\n            address: '',\n            errorMessage: ''\n        });\n\n    };\n    //when the email button is clicked, the searchbar changes in order to receive email input\n    onEmailClick = event => {\n        event.preventDefault();\n        this.setState({\n            info: '',\n            jobs: [],\n            certificates: [],\n            addressform: false,\n            address: '',\n            email: '',\n            errorMessage: ''\n        });\n\n    };\n\n//when the address button is clicked, the searchbar changes in order to receive eth address input\n    onAddressClick = event => {\n        event.preventDefault();\n        this.setState({\n            info: '',\n            jobs: [],\n            certificates: [],\n            addressform: true,\n            address: '',\n            email: '',\n            errorMessage: ''\n        });\n\n    };\n    //once called, the function calls the following functions of the contract (getBasicInfo, getBasicInfo, getJob, getCertificateCount, getCertificate) and displays the info on screen for email based search\n    onSecondSubmit = async event => {\n\n        try {\n            event.preventDefault();\n            this.setState({accounts: await web3.eth.getAccounts()});\n            this.setState({loading: true, errorMessage: ''});\n            const j = await instance.methods.getAddress(this.state.email).call();\n            const x = await instance.methods.getBasicInfo(j).call();\n            if (x === null) {\n                this.setState({errorMessage: 'E-mail not registered'});\n            } else {\n                this.setState({info: x});\n            }\n            const y = await instance.methods.getJobCount(j).call();\n            for (let i = 0; i < y; i++) {\n                const z = await instance.methods.getJob(j, i).call();\n                this.setState({jobs: [...this.state.jobs, z]});\n            }\n            const z = await instance.methods.getCertificateCount(j).call();\n            for (let i = 0; i < z; i++) {\n                const r = await instance.methods.getCertificate(j, i).call();\n                this.setState({certificates: [...this.state.certificates, r]});\n            }\n        } catch (err) {\n            if (err.message.includes('User denied')) {\n                this.setState({errorMessage: \"Transaction Canceled\"});\n            }\n        }\n    };\n\n    //once called, the function calls the following functions of the contract (getBasicInfo, getBasicInfo, getJob, getCertificateCount, getCertificate) and displays the info on screen for address based search\n    onSubmit = async event => {\n        try {\n            event.preventDefault();\n            this.setState({accounts: await web3.eth.getAccounts()});\n            this.setState({loading: true, errorMessage: ''});\n            const x = await instance.methods.getBasicInfo(this.state.address).call();\n            if (x === null) {\n                this.setState({errorMessage: 'Address not registered'})\n            } else {\n                this.setState({\n                    info: x\n                });\n            }\n            const y = await instance.methods.getJobCount(this.state.address).call();\n            for (let i = 0; i < y; i++) {\n                const z = await instance.methods.getJob(this.state.address, i).call();\n                this.setState({jobs: [...this.state.jobs, z]});\n            }\n            const z = await instance.methods.getCertificateCount(this.state.address).call();\n            for (let i = 0; i < z; i++) {\n                const r = await instance.methods.getCertificate(this.state.address, i).call();\n                this.setState({certificates: [...this.state.certificates, r]});\n            }\n        } catch (err) {\n            if (err.message.includes('User denied')) {\n                this.setState({errorMessage: \"Transaction Canceled\"});\n            }\n            if (err.message.includes('invalid address'))\n                this.setState({errorMessage: 'Invalid Address!'})\n        }\n    };\n\n    //renders the certificates of an user in table rows\n    renderCertificates() {\n        const x = 'Certificates' + this.state.address;\n        let y = 'Unknown';\n        let r = this.state.certificates.map(function (certificate) {\n            if (certificate[3] === false && certificate[4] === false) {\n                y = 'Unknown'\n            } else if (certificate[3] === true) {\n                y = 'Approved'\n            } else if (certificate[4] === true) {\n                y = 'Denied'\n            }\n            return [<Table.Row positive={certificate[3]} negative={!certificate[3]}>\n                <Table.Cell key={x + '1'}>{certificate[1].toString()}</Table.Cell>\n                <Table.Cell key={x + '2'}>{certificate[0].toString()}</Table.Cell>\n                <Table.Cell key={x + '3'}>{certificate[2].toString()}</Table.Cell>\n                <Table.Cell>{y}</Table.Cell>\n            </Table.Row>];\n        });\n        return r;\n    }\n\n    //renders the table of certificates\n    renderCertificateTable() {\n        let tableStyle = {\n            width: '38%',\n            margin: '30px auto'\n        };\n\n        if (this.state.certificates && this.state.certificates.length) {\n            return (<Table celled style={tableStyle} color={'blue'} key={'blue'} inverted>\n                    <Table.Header>\n                        <Segment inverted color=\"blue\" style={{textalign: 'center'}}><h2>Certificates</h2></Segment>\n                        <Table.Row>\n                            <Table.HeaderCell> Institution</Table.HeaderCell>\n                            <Table.HeaderCell>Year </Table.HeaderCell>\n                            <Table.HeaderCell>Degree</Table.HeaderCell>\n                            <Table.HeaderCell>Validity</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {this.renderCertificates()}\n                    </Table.Body>\n                </Table>\n            );\n        } else return '';\n    }\n\n    //renders the jobs of an user in table rows\n    renderJobs() {\n        const x = this.state.address;\n        let y = 'Unknown';\n        let r = this.state.jobs.map(function (job) {\n            if (job[3] === false && job[4] === false) {\n                y = 'Unknown'\n            } else if (job[3] === true) {\n                y = 'Approved'\n            } else if (job[4] === true) {\n                y = 'Denied'\n            }\n            return [<Table.Row positive={job[3]} negative={!job[3]}>\n                <Table.Cell key={x + 1}>{job[1].toString()}</Table.Cell>\n                <Table.Cell key={x + 2}>{job[0].toString()}</Table.Cell>\n                <Table.Cell key={x + 3}>{job[2].toString()}</Table.Cell>\n                <Table.Cell>{y}</Table.Cell>\n            </Table.Row>];\n        });\n        return r;\n    }\n\n    //renders the table of jobs\n    renderJobsTable() {\n        let tableStyle = {\n            width: '38%',\n            margin: '30px auto'\n        };\n\n        if (this.state.jobs.length !== 0) {\n            return (<Table celled style={tableStyle} color={'blue'} key={'blue'} inverted>\n\n                    <Table.Header>\n                        <Segment inverted color=\"blue\" style={{textalign: 'center'}}><h2>Jobs</h2></Segment>\n                        <Table.Row>\n                            <Table.HeaderCell> Company</Table.HeaderCell>\n                            <Table.HeaderCell>Period Worked</Table.HeaderCell>\n                            <Table.HeaderCell>Position</Table.HeaderCell>\n                            <Table.HeaderCell>Validity</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {this.renderJobs()}\n                    </Table.Body>\n                </Table>\n            );\n        } else return '';\n    }\n\n    render() {\n        let cardStyle = {\n            display: 'block',\n            width: '28%',\n            margin: '7px auto',\n            height: 'auto',\n        };\n        let formStyle = {\n            width: '100%',\n        };\n        return (\n            <div>\n                <div>\n                </div>\n                <Head>\n                    <link\n                        rel=\"stylesheet\"\n                        href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.11/semantic.min.css\"\n                    />\n                    <style>{`\n        body {\n         background: url(\"https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2089&q=80\");\n         background-repeat: no-repeat;\n         background-position: center; \n         background-attachment: fixed;\n        }\n      `}</style>\n                </Head>\n                <Container>ed</Container>\n                <div style={{margin: '6%'}}><Button primary disabled={!this.state.addressform} onClick={this.onEmailClick}>Search by E-mail</Button><Button primary disabled={this.state.addressform} onClick={this.onAddressClick}>Search by Address</Button></div>\n                <Form className={\"form-inline\"} style={formStyle} onSubmit={this.onSubmit}\n                      error={!!this.state.errorMessage}>\n                    {this.state.addressform === true ?\n                        <Form.Group inline style={{width: '60%', margin: '150px auto'}}>\n                            <label style={{fontSize: 'x-large'}}>Search by Address:</label>\n                            <Form.Field style={{width: '90%'}}>\n                                <Form.Input placeholder=\"Ethereum address of user...\"\n                                            aria-placeholder={{color: 'blue'}}\n                                            style={{width: '100%', height: '75px', fontSize: 'large',}}\n                                            value={this.state.address}\n                                            onChange={this.handleChange}\n                                            error={!!this.state.errorMessage}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Button onClick={this.onSubmit}\n                                        color={\"blue\"}\n                                        style={{width: '150px', height: '75px'}}>\n                                    <Icon color='white' name='search'/>\n                                </Button>\n                            </Form.Field>\n                        </Form.Group>\n                        : null}\n                    {this.state.addressform === false ?\n                        <Form.Group inline style={{width: '60%', margin: '150px auto'}}>\n                            <label style={{fontSize: 'x-large'}}>Search by E-mail:</label>\n                            <Form.Field style={{width: '90%'}}>\n                                <Form.Input placeholder=\"E-mail address of user...\"\n                                            aria-placeholder={{color: 'blue'}}\n                                            style={{width: '100%', height: '75px', fontSize: 'large',}}\n                                            value={this.state.email}\n                                            onChange={this.handleSecondChange}\n                                            error={!!this.state.errorMessage}\n                                />\n                            </Form.Field>\n                            <Form.Field>\n                                <Button onClick={this.onSecondSubmit}\n                                        color={\"blue\"}\n                                        style={{width: '150px', height: '75px'}}\n                                >\n                                    <Icon color='white' name='search'/>\n                                </Button>\n                            </Form.Field>\n                        </Form.Group>\n                        : null}\n                    <Message style={{width: '15%', margin: '30px auto'}} error header={\"Notice:\"}\n                             content={this.state.errorMessage}/>\n                </Form>\n                {this.state.info.length === 0 ? null :\n                    <Card color=\"blue\" style={cardStyle}>\n                        <Card.Content>\n                            <div style={{margin: '2%'}}><h3 style={{margin: '1%'}}>Name:</h3> <h5\n                                style={{margin: '1%'}}> {this.state.info[0].toString()}</h5></div>\n                            <div style={{margin: '2%'}}><h3 style={{margin: '1%'}}>Date of birth:</h3> <h5\n                                style={{margin: '1%'}}>{parseInt(this.state.info[1])}/{parseInt(this.state.info[2])}/{parseInt(this.state.info[3])} </h5>\n                            </div>\n                            <div style={{margin: '2%'}}><h3 style={{margin: '1%'}}>Location:</h3> <h5\n                                style={{margin: '1%'}}> {this.state.info[4].toString()}</h5></div>\n                            <div style={{margin: '2%'}}><h3 style={{margin: '1%'}}>E-mail:</h3> <h5\n                                style={{margin: '1%'}}> {this.state.info[5].toString()}</h5></div>\n                        </Card.Content>\n                    </Card>}\n                <div style={{margin: '4%'}}>\n                    <div>{this.renderJobsTable()}</div>\n                    <div>{this.renderCertificateTable()}</div>\n                </div>\n                {/*if an operation started the state will change to true and the snackbar will appear */}\n                <div>{this.state.loading === true ? <SimpleSnackbar/> : null}</div>\n                <FixedMenuLayout/>\n            </div>\n        );\n    }\n}\n\nexport default Index;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA0BA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AArCA;AAuCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAlDA;AAoDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAhEA;AAmEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AA/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAHA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AAJA;AACA;AADA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAbA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAeA;AACA;AAAA;AAAA;AAAA;AACA;AAjBA;AAcA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAoBA;AACA;AAAA;AAAA;AAAA;AACA;AAtBA;AAmBA;AAnBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+GA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AAHA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAbA;AAAA;AACA;AADA;AAaA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAeA;AACA;AAAA;AAAA;AAAA;AACA;AAjBA;AAcA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAkBA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAoBA;AACA;AAAA;AAAA;AAAA;AACA;AAtBA;AAmBA;AAnBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AA7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhHA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAaA;AACA;;;AACA;AACA;AACA;AACA;;;;;;;;;;;AAGA;;AAAA;AACA;;;;AADA;;;AAAA;AACA;;;;;;;;;;;;;;AAEA;AACA;;;AAsvVA;AACA;AAyVA;;;;A","sourceRoot":""}